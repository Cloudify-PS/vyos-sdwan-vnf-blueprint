tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-openstack-plugin/2.2.0/plugin.yaml
#  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
#  - https://raw.githubusercontent.com/MichaelShn/cloudify-utilities-plugin/patch-tmp/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.3.0/plugin.yaml


inputs:

  vyos_image_url:
    default: "https://s3.eu-central-1.amazonaws.com/vnfs/vyos-1.1.7-installed-day0.qcow"

  flavor:
    description: >
      An Openstack Flavor ID.
    default: { get_secret: medium_image_flavor }

  user:
    description: >
      Username for VyOS router
    default: "vyos"

  password:
    description: >
      Password for VyOS router
    default: "demo"

  branch_hostname:
    description: >
      Branch hostname
    default: "branch-1"

  branch_lan_address:
    description: >
      IP address of LAN network
    default: "192.168.101.1/24"

  branch_lan_name:
    description: >
      Beranch LAN network name
    default: ""

  branch_tunnel_address:
    description: >
      IP address of tunnel0 interface
    default: ""

  hq_tunnel_interface:
    description: >
      Tunnel interface on HQ side in format tunX where X is branch ID
    default: "tun1"

  hq_tunnel_address:
    description: >
      IP address of tunnel0 interface
    default: ""

  hq_deployment_name:
    description: >
      HQ deployment name
    default: "vyos-hq-deployment"

  hq_blueprint_name:
    description: >
      HQ blueprint name
    default: "vyos-hq-blueprint"

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: region }




node_templates:

  vyos_vnf_hq_deployment:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: hq_blueprint_name }
          external_resource: true
        deployment:
          id: { get_input: hq_deployment_name }
          external_resource: true
          outputs:
            vyos_vnf_hq_mgmt_ip: hq_mgmt_ip
            vyos_vnf_hq_wan_ip: hq_wan_ip
            vyos_vnf_hq_username: hq_username
            vyos_vnf_hq_password: hq_password
            
  vyos_hq_vnf_vpn_service:
    type: cloudify.terminal.raw
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            terminal_auth: &terminal_auth_hq
              user: { get_input: user }
              password: { get_input: password }
              ip: { get_attribute: [vyos_vnf_hq_deployment, deployment, outputs, hq_mgmt_ip ] }
              promt_check:
                - '#'
                - '$'
              errors:
                - "Command fail."
            calls:
              - action: exit
        start:
          inputs:
            terminal_auth: *terminal_auth_hq
            calls:
              - action: config
              - template: templates/vyos-vnf-hq-vpn-start.txt
                params:
                  TUNNEL_INTERFACE: { get_input: hq_tunnel_interface }
                  HQ_TUNNEL_ADDRESS: { get_input: hq_tunnel_address }
                  HQ_TUNNEL_LOCAL_IP: { get_attribute: [vyos_vnf_hq_deployment, deployment, outputs, hq_wan_ip, 0] }
                  HQ_TUNNEL_REMOTE_IP: { get_attribute: [vyos_vnf_branch, networks, wan_net, 0] }
              - action: commit
              - action: save
        stop:
          inputs:
            terminal_auth: *terminal_auth_hq
            calls:
              - action: config
              - template: templates/vyos-vnf-hq-vpn-start.txt
                params:
                  TUNNEL_INTERFACE: { get_input: hq_tunnel_interface }
              - action: commit
              - action: save
    relationships:
      - type: cloudify.relationships.depends_on
        target: vyos_vnf_hq_deployment
      - type: cloudify.relationships.depends_on
        target: vyos_vnf_branch
      - type: cloudify.relationships.depends_on
        target: vyos_branch_vnf_baseline

           


  vyos_branch_vnf_vpn_service:
    type: cloudify.terminal.raw
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            terminal_auth: &terminal_auth_branch
              user: { get_input: user }
              password: {get_input: password }
              ip: { get_attribute: [vyos_vnf_branch, ip] }
              promt_check:
                - '#'
                - '$'
              errors:
                - "Command fail."
            calls:
              - action: exit
        start:
          inputs:
            terminal_auth: *terminal_auth_branch
            calls:
              - action: config
              - template: templates/vyos-vnf-branch-vpn-start.txt
                params:
                  BRANCH_TUNNEL_ADDRESS: { get_input: branch_tunnel_address }
                  BRANCH_TUNNEL_LOCAL_IP: { get_attribute: [vyos_vnf_branch, networks, wan_net, 0] }
                  BRANCH_TUNNEL_REMOTE_IP: { get_attribute: [vyos_vnf_hq_deployment, deployment, outputs, hq_wan_ip, 0] }
              - action: commit
              - action: save
        stop:
          inputs:
            terminal_auth: *terminal_auth_branch
            calls:
              - action: config
              - action: delete interface tunnel tun0
              - action: commit
              - action: save
    relationships:
      - type: cloudify.relationships.depends_on
        target: vyos_branch_vnf_baseline
      - type: cloudify.relationships.depends_on
        target: vyos_vnf_hq_deployment
      - type: cloudify.relationships.depends_on
        target: vyos_vnf_branch





  vyos_branch_vnf_baseline:
    type: cloudify.terminal.raw
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            terminal_auth: &terminal_auth
              user: { get_input: user }
              password: { get_input: password }
              ip: { get_attribute: [vyos_vnf_branch, ip ] }
              promt_check:
                - '#'
                - '$'
              errors:
                - "Command fail."
            calls:
              - action: exit
        start:
          inputs:
            terminal_auth: *terminal_auth
            calls:
              - action: config
              - template: templates/vyos-vnf-branch-baseline.txt
                params:
                  BRANCH_HOSTNAME: { get_input: branch_hostname }
                  BRANCH_LAN_ADDRESS: { get_attribute: [vyos_vnf_branch, networks, { get_input: branch_lan_name }, 0] }
              - action: commit
              - action: save
    relationships:
      - type: cloudify.relationships.depends_on
        target: vyos_vnf_branch



  vyos_vnf_branch:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
        install_method: none
      server:
        key_name: ''
        image: "vyos-image"
        flavor: { get_input: flavor }
      management_network_name: { get_property: [ mgmt_network, resource_id ] }
    relationships:
    - type: cloudify.openstack.server_connected_to_port
      target: mgmt_port
    - type: cloudify.openstack.server_connected_to_port
      target: wan_network_port
    - type: cloudify.openstack.server_connected_to_port
      target: lan_network_port
    - type: cloudify.relationships.depends_on
      target: vyos_image


  mgmt_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: mgmt_network
    - type: cloudify.relationships.depends_on
      target: mgmt_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: ip

  lan_network_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: lan_network
    - type: cloudify.relationships.depends_on
      target: lan_network_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group

  wan_network_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: wan_network
    - type: cloudify.relationships.depends_on
      target: wan_network_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group



  vyos_image:
    type: cloudify.openstack.nodes.Image
    properties:
      image:
        container_format: "bare"
        disk_format: "qcow2"
      openstack_config: *openstack_config
      image_url: {get_input : vyos_image_url }
      use_external_resource: true
      create_if_missing: true
      resource_id: "vyos-image"

  mgmt_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: provider_subnet
    relationships:
    - target: mgmt_network
      type: cloudify.relationships.contained_in

  mgmt_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: provider

  lan_network_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: false
      resource_id: lan_net_subnet
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              gateway_ip: null
              cidr: { get_input: branch_lan_address }
              ip_version: 4
      cloudify.interfaces.validation:
        creation:
          inputs:
            args:
              gateway_ip: null
              cidr: { get_input: branch_lan_address }
              ip_version: 4
    relationships:
    - target: lan_network
      type: cloudify.relationships.contained_in

  lan_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: false
      resource_id: { get_input: branch_lan_name }

  wan_network_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: wan_net_subnet
    relationships:
    - target: wan_network
      type: cloudify.relationships.contained_in

  wan_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: wan_net

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
#        name: security_group
        description: generic security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: "TCP"
        - remote_ip_prefix: 0.0.0.0/0
          protocol: "UDP"
        - remote_ip_prefix: 0.0.0.0/0
          protocol: "ICMP"
          port_range_min: 0
          port_range_max: 0
        - remote_ip_prefix: 0.0.0.0/0
          protocol: 47
  ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_secret: external_network_name }


outputs:

